[
  {
    "annotations": [
      "@returns `true` if server responds."
    ],
    "name": "server_ready",
    "parameters": [],
    "fullyQualified_name": "M.server_ready",
    "docs": [
      " Checks whether the language servers attached to the current buffer are",
      " ready."
    ],
    "return_type": "Void"
  },
  {
    "annotations": [],
    "name": "hover",
    "parameters": [],
    "fullyQualified_name": "M.hover",
    "docs": [
      " Displays hover information about the symbol under the cursor in a floating",
      " window. Calling the function twice will jump into the floating window."
    ],
    "return_type": "Void"
  },
  {
    "annotations": [
      "@note Many servers do not implement this method. Generally, see |vim.lsp.buf.definition()| instead.",
      "@param options table|nil additional options"
    ],
    "name": "declaration",
    "parameters": [
      [
        "Null<lua.Table<Int, Dynamic>>",
        "options"
      ]
    ],
    "fullyQualified_name": "M.declaration",
    "docs": [
      " Jumps to the declaration of the symbol under the cursor.",
      "     - reuse_win: (boolean) Jump to existing window if buffer is already open.",
      "     - on_list: (function) handler for list results. See |lsp-on-list-handler|"
    ],
    "return_type": "Void"
  },
  {
    "annotations": [
      "@param options table|nil additional options"
    ],
    "name": "definition",
    "parameters": [
      [
        "Null<lua.Table<Int, Dynamic>>",
        "options"
      ]
    ],
    "fullyQualified_name": "M.definition",
    "docs": [
      " Jumps to the definition of the symbol under the cursor.",
      "     - reuse_win: (boolean) Jump to existing window if buffer is already open.",
      "     - on_list: (function) handler for list results. See |lsp-on-list-handler|"
    ],
    "return_type": "Void"
  },
  {
    "annotations": [
      "@param options table|nil additional options"
    ],
    "name": "type_definition",
    "parameters": [
      [
        "Null<lua.Table<Int, Dynamic>>",
        "options"
      ]
    ],
    "fullyQualified_name": "M.type_definition",
    "docs": [
      " Jumps to the definition of the type of the symbol under the cursor.",
      "     - reuse_win: (boolean) Jump to existing window if buffer is already open.",
      "     - on_list: (function) handler for list results. See |lsp-on-list-handler|"
    ],
    "return_type": "Void"
  },
  {
    "annotations": [
      "@param options table|nil additional options"
    ],
    "name": "implementation",
    "parameters": [
      [
        "Null<lua.Table<Int, Dynamic>>",
        "options"
      ]
    ],
    "fullyQualified_name": "M.implementation",
    "docs": [
      " Lists all the implementations for the symbol under the cursor in the",
      " quickfix window.",
      "     - on_list: (function) handler for list results. See |lsp-on-list-handler|"
    ],
    "return_type": "Void"
  },
  {
    "annotations": [],
    "name": "signature_help",
    "parameters": [],
    "fullyQualified_name": "M.signature_help",
    "docs": [
      " Displays signature information about the symbol under the cursor in a",
      " floating window."
    ],
    "return_type": "Void"
  },
  {
    "annotations": [
      "@param context (context support not yet implemented) Additional information",
      "@see vim.lsp.protocol.constants.CompletionTriggerKind"
    ],
    "name": "completion",
    "parameters": [
      [
        "Context support not yet implemented",
        "context"
      ]
    ],
    "fullyQualified_name": "M.completion",
    "docs": [
      " Retrieves the completion items at the current cursor position. Can only be",
      " called in Insert mode.",
      " about the context in which a completion was triggered (how it was triggered,",
      " and by which trigger character, if applicable)"
    ],
    "return_type": "Void"
  },
  {
    "annotations": [
      " @param options table|nil Optional table which holds the following optional fields:"
    ],
    "name": "format",
    "parameters": [
      [
        "Null<lua.Table<Int, Dynamic>>",
        "options"
      ]
    ],
    "fullyQualified_name": "M.format",
    "docs": [
      " Formats a buffer using the attached (and optionally filtered) language",
      " server clients.",
      "     - formatting_options (table|nil):",
      "         Can be used to specify FormattingOptions. Some unspecified options will be",
      "         automatically derived from the current Neovim options.",
      "         See https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#formattingOptions",
      "     - timeout_ms (integer|nil, default 1000):",
      "         Time in milliseconds to block for formatting requests. No effect if async=true",
      "     - bufnr (number|nil):",
      "         Restrict formatting to the clients attached to the given buffer, defaults to the current",
      "         buffer (0).",
      "     - filter (function|nil):",
      "         Predicate used to filter clients. Receives a client as argument and must return a",
      "         boolean. Clients matching the predicate are included. Example:",
      "         <pre>",
      "         -- Never request typescript-language-server for formatting",
      "         vim.lsp.buf.format {",
      "           filter = function(client) return client.name ~= \"tsserver\" end",
      "         }",
      "         </pre>",
      "     - async boolean|nil",
      "         If true the method won't block. Defaults to false.",
      "         Editing the buffer while formatting asynchronous can lead to unexpected",
      "         changes.",
      "     - id (number|nil):",
      "         Restrict formatting to the client with ID (client.id) matching this field.",
      "     - name (string|nil):",
      "         Restrict formatting to the client with name (client.name) matching this field.",
      "     - range (table|nil) Range to format.",
      "         Table must contain `start` and `end` keys with {row, col} tuples using",
      "         (1,0) indexing.",
      "         Defaults to current selection in visual mode",
      "         Defaults to `nil` in other modes, formatting the full buffer"
    ],
    "return_type": "Void"
  },
  {
    "annotations": [],
    "name": "set_range",
    "parameters": [
      [
        "Dynamic",
        "client"
      ],
      [
        "Dynamic",
        "params"
      ]
    ],
    "fullyQualified_name": "set_range",
    "docs": [],
    "return_type": "Void"
  },
  {
    "annotations": [
      "@param new_name string|nil If not provided, the user will be prompted for a new",
      "@param options table|nil additional options"
    ],
    "name": "rename",
    "parameters": [
      [
        "Null<String>",
        "new_name"
      ],
      [
        "Null<lua.Table<Int, Dynamic>>",
        "options"
      ]
    ],
    "fullyQualified_name": "M.rename",
    "docs": [
      " Renames all references to the symbol under the cursor.",
      "                name using |vim.ui.input()|.",
      "     - filter (function|nil):",
      "         Predicate used to filter clients. Receives a client as argument and",
      "         must return a boolean. Clients matching the predicate are included.",
      "     - name (string|nil):",
      "         Restrict clients used for rename to ones where client.name matches",
      "         this field."
    ],
    "return_type": "Void"
  },
  {
    "annotations": [],
    "name": "get_text_at_range",
    "parameters": [
      [
        "Dynamic",
        "range"
      ],
      [
        "Dynamic",
        "offset_encoding"
      ]
    ],
    "fullyQualified_name": "get_text_at_range",
    "docs": [],
    "return_type": "Void"
  },
  {
    "annotations": [
      "@param context (table) Context for the request",
      "@see https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_references",
      "@param options table|nil additional options"
    ],
    "name": "references",
    "parameters": [
      [
        "lua.Table<Int, Dynamic>",
        "context"
      ],
      [
        "Null<lua.Table<Int, Dynamic>>",
        "options"
      ]
    ],
    "fullyQualified_name": "M.references",
    "docs": [
      " Lists all the references to the symbol under the cursor in the quickfix window.",
      "     - on_list: (function) handler for list results. See |lsp-on-list-handler|"
    ],
    "return_type": "Void"
  },
  {
    "annotations": [
      "@param options table|nil additional options"
    ],
    "name": "document_symbol",
    "parameters": [
      [
        "Null<lua.Table<Int, Dynamic>>",
        "options"
      ]
    ],
    "fullyQualified_name": "M.document_symbol",
    "docs": [
      " Lists all symbols in the current buffer in the quickfix window.",
      "     - on_list: (function) handler for list results. See |lsp-on-list-handler|"
    ],
    "return_type": "Void"
  },
  {
    "annotations": [],
    "name": "incoming_calls",
    "parameters": [],
    "fullyQualified_name": "M.incoming_calls",
    "docs": [
      " Lists all the call sites of the symbol under the cursor in the",
      " |quickfix| window. If the symbol can resolve to multiple",
      " items, the user can pick one in the |inputlist()|."
    ],
    "return_type": "Void"
  },
  {
    "annotations": [],
    "name": "outgoing_calls",
    "parameters": [],
    "fullyQualified_name": "M.outgoing_calls",
    "docs": [
      " Lists all the items that are called by the symbol under the",
      " cursor in the |quickfix| window. If the symbol can resolve to",
      " multiple items, the user can pick one in the |inputlist()|."
    ],
    "return_type": "Void"
  },
  {
    "annotations": [],
    "name": "list_workspace_folders",
    "parameters": [],
    "fullyQualified_name": "M.list_workspace_folders",
    "docs": [
      " List workspace folders."
    ],
    "return_type": "Void"
  },
  {
    "annotations": [],
    "name": "add_workspace_folder",
    "parameters": [
      [
        "Dynamic",
        "workspace_folder"
      ]
    ],
    "fullyQualified_name": "M.add_workspace_folder",
    "docs": [
      " Add the folder at path to the workspace folders. If {path} is",
      " not provided, the user will be prompted for a path using |input()|."
    ],
    "return_type": "Void"
  },
  {
    "annotations": [],
    "name": "remove_workspace_folder",
    "parameters": [
      [
        "Dynamic",
        "workspace_folder"
      ]
    ],
    "fullyQualified_name": "M.remove_workspace_folder",
    "docs": [
      " Remove the folder at path from the workspace folders. If",
      " {path} is not provided, the user will be prompted for",
      " a path using |input()|."
    ],
    "return_type": "Void"
  },
  {
    "annotations": [
      "@param query (string, optional)",
      "@param options table|nil additional options"
    ],
    "name": "workspace_symbol",
    "parameters": [
      [
        "String",
        "query"
      ],
      [
        "Null<lua.Table<Int, Dynamic>>",
        "options"
      ]
    ],
    "fullyQualified_name": "M.workspace_symbol",
    "docs": [
      " Lists all symbols in the current workspace in the quickfix window.",
      " The list is filtered against {query}; if the argument is omitted from the",
      " call, the user is prompted to enter a string on the command line. An empty",
      " string means no filtering is done.",
      "     - on_list: (function) handler for list results. See |lsp-on-list-handler|"
    ],
    "return_type": "Void"
  },
  {
    "annotations": [],
    "name": "document_highlight",
    "parameters": [],
    "fullyQualified_name": "M.document_highlight",
    "docs": [
      " Send request to the server to resolve document highlights for the current",
      " text document position. This request can be triggered by a  key mapping or",
      " by events such as `CursorHold`, e.g.:",
      " <pre>",
      " autocmd CursorHold  <buffer> lua vim.lsp.buf.document_highlight()",
      " autocmd CursorHoldI <buffer> lua vim.lsp.buf.document_highlight()",
      " autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()",
      " </pre>",
      " Note: Usage of |vim.lsp.buf.document_highlight()| requires the following highlight groups",
      "       to be defined or you won't be able to see the actual highlights.",
      "         |hl-LspReferenceText|",
      "         |hl-LspReferenceRead|",
      "         |hl-LspReferenceWrite|"
    ],
    "return_type": "Void"
  },
  {
    "annotations": [],
    "name": "clear_references",
    "parameters": [],
    "fullyQualified_name": "M.clear_references",
    "docs": [
      " Removes document highlights from current buffer."
    ],
    "return_type": "Void"
  },
  {
    "annotations": [],
    "name": "action_filter",
    "parameters": [
      [
        "Dynamic",
        "a"
      ]
    ],
    "fullyQualified_name": "action_filter",
    "docs": [],
    "return_type": "Void"
  },
  {
    "annotations": [],
    "name": "apply_action",
    "parameters": [
      [
        "Dynamic",
        "action"
      ],
      [
        "Dynamic",
        "client"
      ]
    ],
    "fullyQualified_name": "apply_action",
    "docs": [],
    "return_type": "Void"
  },
  {
    "annotations": [],
    "name": "on_user_choice",
    "parameters": [
      [
        "Dynamic",
        "action_tuple"
      ]
    ],
    "fullyQualified_name": "on_user_choice",
    "docs": [],
    "return_type": "Void"
  },
  {
    "annotations": [
      "@param options table|nil Optional table which holds the following optional fields:",
      "@see https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_codeAction"
    ],
    "name": "code_action",
    "parameters": [
      [
        "Null<lua.Table<Int, Dynamic>>",
        "options"
      ]
    ],
    "fullyQualified_name": "M.code_action",
    "docs": [
      " Selects a code action available at the current",
      " cursor position.",
      "  - context: (table|nil)",
      "      Corresponds to `CodeActionContext` of the LSP specification:",
      "        - diagnostics (table|nil):",
      "                      LSP `Diagnostic[]`. Inferred from the current",
      "                      position if not provided.",
      "        - only (table|nil):",
      "               List of LSP `CodeActionKind`s used to filter the code actions.",
      "               Most language servers support values like `refactor`",
      "               or `quickfix`.",
      "  - filter: (function|nil)",
      "           Predicate taking an `CodeAction` and returning a boolean.",
      "  - apply: (boolean|nil)",
      "           When set to `true`, and there is just one remaining action",
      "          (after filtering), the action is applied without user query.",
      "  - range: (table|nil)",
      "           Range for which code actions should be requested.",
      "           If in visual mode this defaults to the active selection.",
      "           Table must contain `start` and `end` keys with {row, col} tuples",
      "           using mark-like indexing. See |api-indexing|"
    ],
    "return_type": "Void"
  },
  {
    "annotations": [
      "@param command_params table A valid `ExecuteCommandParams` object",
      "@see https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_executeCommand"
    ],
    "name": "execute_command",
    "parameters": [
      [
        "lua.Table<Int, Dynamic>",
        "command_params"
      ]
    ],
    "fullyQualified_name": "M.execute_command",
    "docs": [
      " Executes an LSP server command."
    ],
    "return_type": "Void"
  }
]